server:
  error:
    include-message: always
    include-binding-errors: always
  port: 9095


spring:
  kafka:
    bootstrap-servers: kafka-broker-1:9092
    admin:
      properties:
        bootstrap.servers: kafka-broker-1:9092
    producer:
      group-id: user-register-group
      bootstrap-servers: kafka-broker-1:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  main:
    allow-bean-definition-overriding: true
  datasource:
    continue-on-error: false
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres
    hibernate:
      ddl-auto: validate
      show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  application:
    name: api-gateway

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      base-path: "/"
      exposure:
        include: "*"


payment:
  app:
    jwtSecret: qwdqwdqwd!!''!D'!D'!D'!D!DD!^+R!RT+!TR+!â†“45d415d41d12d21d12d1d
    jwtExpirationMs: 86400000

kafka:
  user:
    topic: user-register

feign:
  circuitbreaker:
    enabled: true

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/

resilience4j.circuitbreaker:
  instances:
    beCommon:
      registerHealthIndicator: true
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowType: TIME_BASED
      minimumNumberOfCalls: 20
      waitDurationInOpenState: 50s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10

resilience4j.retry:
  instances:
    beCommon:
      maxAttempts: 3
      waitDuration: 10s
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException

resilience4j.ratelimiter:
  instances:
    beCommon:
      limitForPeriod: 2
      limitRefreshPeriod: 15s
      timeoutDuration: 5s
      registerHealthIndicator: true
      eventConsumerBufferSize: 100
